npx create-next-app client
history
history/
rm -rf client/
cd ..
ls
l
cd client
cd amet/
git clone https://github.com/japrozs/amet.git
cd Creative\ Cloud\ Files/
cd Documents/
cd amet
cat tailwind.config.js
cat _app.tsx
cat index.tsx
cd pages
cd src
code .
psql --version
npm run dev
cat components/Navbar.tsx
PORT=3001 npm run dev
cd ../../../
cat Navbar.tsx
cd ../components/
cd components
cat globals.css
cd styles/
cd components/
cd reddit
cd ../
curl localhost:5000/api/story/all/
curl localhost:5000/api/story/
curl localhost:5000/api/stories/
curl localhost:5000/
curl localhost:5000/api/
help
cd amw
docker build -t japrozs/amet:1 .
git clone https://github.com/japrozs/shell
cd shell
docker ---version
cat Dockerfile
brew services start docker
nvim Dockerfile
docker --version
git commit -am "#003 : Configured tailwind and postcss"
git status
git add .
cat .gitignore
git add client/*
git add client/
git commit -m "#002 : Added the client folder"
git push -u origin master
git commit -m "(001) Finished coding the server"
git remote add origin https://github.com/japrozs/amet
gh repo create
curl https://github.com/japrozs/amet
cat package.json
./Main
./Main.class
java Main main.jl
javac Main.java
nvim main.jl
nvim Main.java
cd 001
cd java
touch main.jl
brew search pinecone
javac --version
java --version
nvim
fishyfishfish
software that is written in java
softwareupdate
java Main these are the arguments snf fjf vjnv vjvnvnvvv v v v v vv v v   v v v  vv  v v v vv v  vvmvnmmnnfn mnn nmmndn n n b b bnb b bnbd b bc b cb v b b b  bvb  b mmdndndnsn snn  w w  w w    a a a  nnnd d dndndn dn dn n dndnd nd nd nd nd nd nd nd dndn dn dn dn dnd dn djdjd  n n n nn
cat Main.class
java Main
java Main.class
java Min
touch Main.java
brew install --cask adoptopenjdk15
brew search jdk
brew tap adoptopenjdk/openjdk
brew search java
brewe search java
mkdir 001
mkdir java
rm -rf java
mkdir java/
fish
./tree
gcc tree.c -o tree
./list
touch tree.c
cd data-structures/
mkdir data-structures
rm -rf list
./list  1 32 5 6 7 3 3 2 2
gcc list.c -o list
./list 1 34 2 58 3 2
make
maek
make run
code
touch main.c
touch Makefile
cd hash-tables/
cd hash
mkdir hash-tables
which code
msgfilter input
msgfilter --help
msgfilter
cd bin
cd ../local/
cd /usr/
which node
which byte
which zsh
sl
qemu-system-i386 -kernel kernel
ld link.ld -o kernel kasm.o kc.o
ld -m -T link.ld -o kernel kasm.o kc.o
ld -m elf_i386 -T link.ld -o kernel kasm.o kc.o
nasm -f elf32 kernel.asm -o kasm.o
brew install nasm
gcc kernel.asm -o kasm.o
gcc -m32 -c kernel.c -o kc.o
nasm
qemu-system-x86_64 -kernel
nvim kernel.asm
cd OS
mkdir OS
echo $PATH
code --version
rm -rf OS
rm -rf O
as boot.s -o boot.o
as --32 boot.s -o boot.o
./run.sh
chmod +x ./run.sh
./run
chmod +x run.sh
mkdir oS
nvim main.c
cd rand
mkdir rand
make buildimg
make setup
sudo make
cd gnu-efi
cd dashOS
cd
cd Users
sudo cd root
cd root
sudo cd root/
cd root/
cd var
ls;
cd etc
cd tmp
cd private/
cd pritpalsinghsaini
cd Uses
cd User
cd Volumes/Data/
cd Font\ Book.app/Contents/
cd .
cd Resources/
cd Contents/
cd _CodeSignature/
./App\ Store
App\ Store
cd MacOS/
la
cd App\ Store.app/Contents/
cd Applications/
cd System/
d ..
echo $whoami
set whoami
whoami
set whoami japroz
which
make --version
make bochs
make qemu
make default
cat Makefile
cat Makefile.am
cat main.cpp
cd touch/
cd toch
cd programs
cat intel_16.asm
cd bootloader/
cd tlib
cd tstl
cd init
cd thor-os/
cd ../../
bios -v
bochs -v
cd dashOS/
code ./
qemu-system-x86_64 CustomOS.img
cd kernel
cat README.rst
cd tools
hdd.img
clear
c ..
c d..=
cls
cd include
cd printf/
qemu-system-x86_64 hdd.img
qemu-system-x86_64
qemu-system-x86_64 main.iso
git clone  --recursive https://github.com/wichtounet/thor-os.git
git checkout --recursive https://github.com/wichtounet/thor-os.git
cd C
qemu-system-x86_64 --help
cat makefile
make clean
bash
mkdir -p
gcc -v
qemu-x86_64
qemu-x86-64
cd gnu-efi/
env
python3
cat h/PineconeProgram.h
cat PineconeProgram.cpp
cd pinecone/src
mkdir examples
mkdir src include
cd ion
mkdir ion
rm -rf ion
./pinecone examples/fizzBuzz.tx
./pinecone -cpp examples/fizzBuzz.tx
./pinecone -cpp examples/fizzBuzz.pn
./pinecone examples/fizzBuzz.pn -cpp
./pinecone
./pinecone -h
./pinecone --help
./pinecone examples/fizzBuzz.pn examples/morse.pn
./pinecone examples/fizzBuzz.pn
cd examples
make build
cd Pinecone/
git clone https://github.com/wmww/Pinecone.git
gcc - xc x.c
./xc
gcc xc.c -o xc
cd write-a-C-interpreter/
git clone https://github.com/lotabout/write-a-C-interpreter.git
touch main.c Makefile
cd small-lang/
mkdir small-lang
cd compiler
cat 001/main.c
tree
cat research/main.c
man string.h
make ru
./main makefile
./main Makefile
./main
gcc interpret.c -o interpret
-v
make -v
cd C/compiler/
./main hello.ks
./ion
cat main.c
cd bf_interpreter/
touch main.c Makefile hello.ks
mkdir compiler
mkdir ../C/compiler
bf
mkdir bf_interpreter
./main.c
chmod +x main.c
gcc main.c -o main
cd ../research/
touch tcpclient.c
zsh
cd sockets/
mkdir sockets
gcc --help
gcc --libs opengl
gcc --lib opengl
opengl
cmake
objdump sshpass
gdb
objdump
cat sshpass .9
./sshpass
sshpass
main
what
mkdir C
rm -rf C
./git-gs
git-gs
cd depot_tools/
git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
/Users/pritpalsinghsaini/Desktop/fnct/Gsm\ Guide\ /iRogerosx\ iCloud\ Bypass\ tool\  ; exit;
/Users/pritpalsinghsaini/Downloads/Gsm\ Guide\ /iRogerosx\ iCloud\ Bypass\ tool\  ; exit;
./maim
mkae
./mani
./main this is a command line argument
nake
rm -rf header.h
touch main.c header.h Makefile
mkdir 007 && cd 007
mkdir 006
cat make
cd /usr/bin/
which make
make -f Basic.mk.template
make -f Basic.mk
cd make
git clone https://github.com/mirror/make.git
nvim Makefile
cd gosh
doas
make -V
byte
which fish
clear && fish
nvim config.fish
cd .config/fish/
cat fisher.fish
cd functions/
set fish_color_host yellow
cd ...
cd tsgist
sudo chsh -s /usr/local/bin/fish pritpalsinghsaini
chsh -s 'which fish'
chsh -s /usr/local/bin/fish pritpalsinghsaini saini1313
set fish_color_host_remote bryellow
set fish_color_host_remote yellow
cd /.config/fish
set fish_color_host yellow -b 'fff'
set_color --print-colors
fish --print-colors
# Application
set fish_color_command brwhite --bold
set fish_color_command brwhite
set fish_color_command white --bold
set fish_color_normal brwhite --bold
set fish_color_normal --text='normal'
set fish_color_normal --text='133'
set fish_color_normal --text='133l'
set fish_color_normal --background='normal'
set fish_color_normal --background='133'
echo tiujth
echo 'f'
set fish_color_normal brwhite
set_color brwhite
set_color brwhite;echo 'tjntjntjn'
echo 'rjrjrjtjfjfjnf'
--print-colors
touch main.c Makefile header.h
mkdir gosh
omf search gruvbox
omf install gruvbox
omf theme gruvbox
omf gruvbox
omf list
cd ../../.
nvim con
cd fish
cd .config
cd config
git rm --cached client
git init
npx tailwind init -p
npm install postcss tailwindcss autoprefixer
cat omf.fish
cd conf.d/
cat conf.d
cd fish/
cd .config/
echo A;echo b;echo c;echo d;
cmd
CMD_DURATION
$CMD_DURATION
./
.
;
13:43:33
tsgist
fish_config colors
cat config.fish
nvim omf.fish
cat omg.fish
cat conf.d/
cd omf
cd ../.config
git clone https://github.com/herrbischoff/iterm2-gruvbox.git
nvim theme
cat theme
omf install https://github.com/morhetz/gruvbox
call theme_gruvbox('light', 'soft')
reload
echo 'theme_gruvbox(dark, soft)' > config.fish
rm -rf config.fish
touch config.fish
cat fish_plugins
cd fish_plugins
theme_gruvbox
fisher install jomik/fish-gruvbox
fisher add jomik/fish-gruvbox
fisher
curl https://git.io/fisher --create-dirs -sLo ~/.config/fish/functions/fisher.fish
omf install
omf --version
ohmyfish --version
cd aiml/
omf install font-powerlines
chsh -s /usr/local/bin/fish
sudo chsh -s /usr/bin/fish/ pritpalsinghsaini
chsh -s /usr/bin/fish pritpalsinghsaini
chsh -s /usr/bin/fish saini1313
chsh -s saini1313 /usr/bin/fish
chsh -s /usr/bin/fish
echo 'Hello World'
echo (setcolor green) "Echo World"
touch main.c header.h
cd header
mkdir header
code-server
brew install jupyter
notebook
pip3 install notebook
pip install notebook
jupyter notebook
jpuyter notebook
jupyterlab
cd merng
cat node
cd node
cd usr/local/bin
jupyter-notebook
jupyter
pip3 install jupyterlab
pip3 install jupyter
pip3 install jupyter-notebook
pip3 install --upgrade pip --user
pip3 install --upgrade pip
pip3 install --upgrade pip3
pip install --upgrade pip
cat python3
cat python3.8
cd python3
cd local
cd usr
shell
clear && gcc main.c -o main && ./main
gcc main.c -o main && clear && ./main
gcc main.c -o main && clear && ./maain
./main cask install google-chrome
./main cask install firefox
./main tesing several function convert
./main testing several function convert
./main testing
./main testing function
cat shell/main.c
sudo make install libreadline-dev
sudo make install -y libreadline-dev
sudo make install -y libreadlinde-dev
make install libreadline-dev
mkdir shell
rm -rf *
cd CLI
mkdir CLI
gcc main.c -o main -fno-stack-protector && clear && ./main
/.main
gcc main.c -o main -fno-stack-protector
gcc main.c -o -fno-stack-protector
gcc main.c -o -fno-stack-protector && clear && ./main
gcc -o main.c -fno-stack-protector && clear && ./main
cd 002
build main
compile main
which bin
which npx
which npm
which tsgist
sudo npm i -g tsgist
npm i -g tsgist
npm i tsgist
cat package
npm publish
sudo npm unlink
npm unlink
rm -rf tsconfig.json
node src/index.js init
cd dist
nvim src/index.js
nvim package.json
sudo npm link
npm link
sudo npm uninstall -g tsgist
sudo npm install -g tsgist
npm uninstall -g tsgist
cp -R LICENSE.MD dist
cp -R README.MD dist
npm i jest
git log
git push
git commit -m "(#008)Added templating features and deployed to NPM(v1.2.0:bookmark:):tada:"
git commit -m "(#007)Added templating features(v1.2.0:bookmark:):tada:"
git commit -m "(#007)Added templating features"
node src/index.js
npm install
cp -R package.json dist
cp -R node_modules dist
cp -R node_modules dist/
cp -R src dist
lz
cp -R /src /dist/
node
cat tsconfig.json
node src/index.js temp config
rm -rf config.json
echo '{"name" : "Japroz Saini"}'>config.json
rm -rf tsgist
touch json.json
mkdir tsgist
c ...
node src/index.js template config
rm -rf japroz.json
tsgist init
./test
gcc test.c -o test
git init && touch README.MD
cd xml-parser
mkdir xml-parser
make main
make compile
make compile main
gcc -o main.exe main.c
gcc -V
./main.exe
main.exe
gcc
sqlite3
clang -V
brew search gcc
gnu -v
tsgist --help init
cd..
cat python
cd python
zprint
cd urs
sls
curl https://apple.com
curl https://japrozsaini.me
brew search google-chrome
brew search emulator
npm install tsgist
git commit -m "(#006)Added support for VueJS"
nvim CHANGELOG.MD
git commit -m "(#006)Added AngularJS and VueJS"
